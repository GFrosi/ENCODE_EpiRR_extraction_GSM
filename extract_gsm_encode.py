import sys
import pandas as pd
from tqdm import tqdm
import requests
from retry import retry
from bs4 import BeautifulSoup
import lxml.html as lh
from time import sleep
from distutils.dir_util import mkpath
from utils.loggerinitializer import *
from json import JSONDecodeError
import logging
from datetime import datetime
import os


mkpath(os.getcwd()+ "/logs/")
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
initialize_logger(os.getcwd() + "/logs/", logger)



def get_gsm(df):
    '''Receives a df
    with a url column
    to access the ENCODE
    database. Returns a list
    containig the GSE/GSM from
    external resources tag.'''

    list_url = df['Link_Sample_ENCODE'].to_list()
    list_gsm = []
    list_url_app = []

    logger.info('Starting requests...')

    for url in tqdm(list_url):
        
        try:
            result = requests.get(url)
            data = result.text
            soup = BeautifulSoup(data, 'lxml').findAll('ul', class_="") #getting info external resources
            sleep(3)
            
            for li in soup:
                
                if not 'GEO:' in li.get_text():
                    continue
                
                if 'GEO:' in li.get_text():
                    to_append = li.get_text().split('GEO:')[1].split('UCSC')[0] #two splits to guarante just GSM/GSE
                    list_gsm.append(to_append)
                    list_url_app.append(url)

                else:
                    list_gsm.append('----')
                    list_url_app.append(url)


        except requests.exceptions.Timeout:
            logger.error("Timeout! You should restart the program from: " + str(url))
            print(f'Timeout! You should restart the program from: {url}')
            sys.exit(1)

        except ConnectionAbortedError as cae:
            logger.error("Connection aborted error! You shold restart the program from: " + str(url))
            print(f"Error {cae}. You shold restart the program  from {url}")
            sys.exit(1)

        except ConnectionRefusedError as cre:
            logger.error("Connection aborted error! You shold restart the program from: " + str(url))
            print(f"Error {cre}. You shold restart the program  from {url}")
            sys.exit(1)
        
        except:
            logger.error("Request failed. Check if the url: " + (url) + "has a external resources tag")
            print(f"Problem with URL {url}. Check if this url has a external resources tag!")
            sys.exit(1)

    logger.info('Request successfully finished!')

    return list_gsm, list_url_app


def create_df(list_url_app, list_gsm): #just in case of the len be greater or lower compared with the main df
    """Receives two list (list of url
    and list of GSM). Returns a df with
    each of this info as columns."""

    d = {'URL':list_url_app,'External_resources':list_gsm}
    df_extracted = pd.DataFrame(d)

    return df_extracted


def merge_dfs(df1, df2):
    """Receives two dfs
    with 'Link_Sample_ENCODE'
    and 'URL' columns and
    returns a merged df"""

    df_final = pd.merge(df1, df2, how='left', left_on='Link_Sample_ENCODE', right_on='URL').drop(columns=['URL'])

    return df_final


def main():

    print('Starting requests...')
    df = pd.read_csv(sys.argv[1]) #df generated by main_epirr_encode.py
    list_gsm, list_url_app = get_gsm(df)
    print(len(list_gsm))
    print(len(list_url_app))
    logger.info('Length of external_resources info=' + str(len(list_gsm)))
    logger.info('Length of external_resources info=' + str(len(list_gsm)))
    print('Saving extracted df!')
    logger.info('Saving extracted df!')
    df_extracted = create_df(list_url_app, list_gsm)
    time = datetime.now().strftime("%Y_%m_%d") #to build the file name
    df_extracted.to_csv('df_extracted_ENCODE'+str(time)+'.csv', index=False)
    print('Merging dfs!')
    logger.info('Saving merged final df!')
    final_df = merge_dfs(df, df_extracted)
    final_df.to_csv('EpiRR_ENCODE_GSM_GSE'+str(time)+'.csv', index=False)
    logger.info('Done')      


if __name__ == "__main__":



    main()